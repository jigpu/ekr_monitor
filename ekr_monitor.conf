; ekr-monitor.conf
; Configuration setttings for ekr_monitor.py
;
; Express Key Remote layout:
;     Button 1:      Mode switch
;     Buttons 2-6:   Ring of buttons, starting at left, going clockwise
;     Buttons 7-9:   Top row of buttons in lower-half (raised dot)
;     Buttons 10-12: Second row of buttons in lower half (cutout/no rectangle)
;     Buttons 13-15: Third row of buttons in lower half (raised bar/dot)
;     Buttons 16-18: Botom row of buttons in lower half (no tactile mark)
;
; Parameter values should use the "action mapping" format defined in `man xsetwacom`.
; For instance "key CTRL z" to map a button to the keyboard shortcut "CTRL+Z" or
; "button 4" to map a button to mouse button 4 (scrollwheel up).
;
; It isn't possible to specify arbitrary commands to run when a button is pushed
; but you can configure your desktop environment or use a program like `xbindkeys`
; to launch a program or run a command in response to a special keyboard shortcut
; that you can define here.
;

[general]
sleep = 0.1

; Sample Krita-compatible configuration
[mode_0]
; Zoom
ring_ccw = key CTRL -
ring_cw = key CTRL SHIFT +

; Buttons around ring (clockwise from left)
; [undefined], undo, redo, [undefined], save
;button_2 = 
button_3 = key CTRL z
button_4 = key CTRL SHIFT z
;button_5 = 
button_6 = key CTRL s

; Left buttons (top to bottom)
; Paintbrush, rectangular select, move tool, clear
button_7 = key b
button_10 = key CTRL r
button_13 = key t
button_16 = key del

; Middle buttons (top to bottom)
; Modifiers, canvas-only view
button_8 = key +SHIFT
button_11 = key +CTRL
button_14 = key +ALT
button_17 = key tab

; Right buttons (top to bottom)
; New layer, [undefined], next layer, previous layer
button_9 = key insert
;button_12 =
button_15 = key PgUp
button_18 = key PgDn


; Same as above, but ring controls brush size
; Could have a different config for a second application
[mode_1]
ring_ccw = key [
ring_cw = key ]
;button_1 =
;button_2 = 
button_3 = key CTRL z
button_4 = key CTRL SHIFT z
;button_5 = 
button_6 = key CTRL s
button_7 = key b
button_10 = key CTRL r
button_13 = key t
button_16 = key del
button_8 = key +SHIFT
button_11 = key +CTRL
button_14 = key +ALT
button_17 = key tab
button_9 = key insert
;button_12 =
button_15 = key PgUp
button_18 = key PgDn


; Same as above, but ring rotates canvas
; Could have a different config for a third application
[mode_2]
ring_ccw = key CTRL [
ring_cw = key CTRL ]
;button_1 =
;button_2 = 
button_3 = key CTRL z
button_4 = key CTRL SHIFT z
;button_5 = 
button_6 = key CTRL s
button_7 = key b
button_10 = key CTRL r
button_13 = key t
button_16 = key del
button_8 = key +SHIFT
button_11 = key +CTRL
button_14 = key +ALT
button_17 = key tab
button_9 = key insert
;button_12 =
button_15 = key PgUp
button_18 = key PgDn